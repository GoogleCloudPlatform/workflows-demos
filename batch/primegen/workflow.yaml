# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
main:
  params: [args]
  steps:
  - init:
      assign:
      - projectId: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
      - region: "us-central1"
      - batchApi: "batch.googleapis.com/v1alpha1"
      - batchApiUrl: ${"https://" + batchApi + "/projects/" + projectId + "/locations/" + region + "/jobs"}
      - imageUri: ${region + "-docker.pkg.dev/" + projectId + "/containers/primegen-service:v1"}
      - jobId: ${"job-primegen-" + string(int(sys.now()))}
      - bucket: "primegen-service"
  # TODO: Add it in once the bug is fixed
  #     - bucket: ${projectId + "-" + jobId}
  # - createBucket:
  #       call: googleapis.storage.v1.buckets.insert
  #       args:
  #         query:
  #           project: ${projectId}
  #         body:
  #           name: ${bucket}
  - logCreateBatchJob:
      call: sys.log
      args:
        data: ${"Creating and running the batch job " + jobId}
  - createAndRunBatchJob:
      call: http.post
      args:
        url: ${batchApiUrl}
        query:
          job_id: ${jobId}
        headers:
          Content-Type: application/json
        auth:
          type: OAuth2
        body:
          taskGroups:
          - taskSpec:
              runnables:
              - container:
                  imageUri: ${imageUri}
              environment:
                variables:
                  BUCKET: ${bucket}
            taskCount: 1 # TODO: Change to > 1 once the bug is fixed
          logsPolicy:
            destination: CLOUD_LOGGING
      result: createAndRunBatchJobResponse
  - getJob:
      call: http.get
      args:
        url: ${batchApiUrl + "/" + jobId}
        auth:
          type: OAuth2
      result: getJobResult
  - logState:
      call: sys.log
      args:
        data: ${"Current job state " + getJobResult.body.status.state}
  - assertSucceeded:
      switch:
        - condition: ${getJobResult.body.status.state == "SUCCEEDED"}
          next: logDeleteBatchJob
      next: sleep
  - sleep:
      call: sys.sleep
      args:
        seconds: 10
      next: getJob
  - logDeleteBatchJob:
      call: sys.log
      args:
        data: ${"Deleting the batch job " + jobId}
  - deleteBatchJob:
      call: http.delete
      args:
        url: ${batchApiUrl + "/" + jobId}
        auth:
          type: OAuth2
      result: deleteBatchJob
  - returnResult:
      return:
        jobId: ${jobId}
        bucket: ${bucket}
        status: "OK"