main:
  params: [args]
  steps:
    - init:
        assign:
          - subreddit: ${args.subreddit}
          # Set limit to low to avoid ResourceLimit issues
          - limit: ${args.limit}
          - totalScore: 0
    - getTopPosts:
        call: http.get
        args:
          url: ${"https://www.reddit.com/r/" + subreddit + "/top.json?t=day&limit=" + limit}
        result: topPostsResult
    - processPosts:
        # for-in syntax is currently in private preview
        for:
          value: post
          in: ${topPostsResult.body.data.children}
          steps:
            - analyzeSentiment:
                call: googleapis.language.v1.documents.analyzeSentiment
                args:
                    body:
                      document:
                        content: ${post.data.title + " " + post.data.selftext}
                        type: "PLAIN_TEXT"
                result: sentimentResult
            - updateTotalScore:
                assign:
                    - currentScore: ${sentimentResult.documentSentiment.score}
                    - totalScore: ${totalScore + currentScore}
            - logPost:
                call: sys.log
                args:
                  text: ${post.data.title + " " + post.data.selftext + ":" + string(currentScore) + " " + string(totalScore)}
    - assignResult:
        assign:
          - numberOfPosts: ${len(topPostsResult.body.data.children)}
          - avgSentiment: ${totalScore / numberOfPosts}
    - logResult:
        call: sys.log
        args:
          text: ${"Total score:" + string(totalScore) + " for n:" + string(numberOfPosts) + " posts with average sentiment:" + string(avgSentiment)}
    - returnResult:
        return: ${avgSentiment}