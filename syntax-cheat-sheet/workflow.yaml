# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is a workflow that tries to show all possible syntax in Workflows.
main:
  params: [args]
  steps:
    - read_runtime_args:
        assign:
          - arg1: ${args.arg1}
          - arg2: ${args.arg2}
    - data_types:
        assign:
          - my_integer: 1      # 64 bit, signed
          - my_double: 4.1     # 64 bit, signed floating point number
          - my_string: "hello" # unicode <= 64kB length
          - my_boolean: true   # true/false, True/False, TRUE/FALSE
          - my_null: null
          - my_list: ["zero","one","two"]
          - my_map:
              name: Lila
              last_name: Barton
              birthYear: 1990
    - conversion_functions:
        assign:
          - to_double: double("2.7") # string, integer to double
          - to_int: int(2.7)         # string, double to integer
          - to_string: string(1.7)   # int, double, boolean to string
    - logical_ops:
        assign:
          - my_true: true
          - my_false: false
          - my_false: ${my_true and my_false}
          - my_true: ${my_true or my_false}
          - my_false: ${not my_true}
    - string_ops:
        assign:
          - my_string: "hello"
          - string_len: ${len(my_string)}
          - string_plus_string: ${my_string+" "+"world"}
          - string_plus_int: ${my_string+" "+string(my_integer)}
    - list_ops:
        assign:
          - my_list: ["zero","one","two"]
          - my_list_len: ${len(my_list)}
          - my_list[0]: "0"
          - idx: 0
          - my_list[idx + 1]: "1"
          - my_list[my_list_len - 1]: "2"
          - my_list: ${list.concat(my_list, "3")}
          - my_multi_dimen_list: [[10, 11, 12], [20, 21, 22]]
          - my_multi_dimen_list[0][1]: "Value11"
    - map_ops:
        assign:
          - my_map: {"Key1": "hello"}
          - map_len: ${len(my_map)}
          - key_exists: ${"Key1" in my_map}
          - key_list: ${keys(my_map)}
          - my_map.Key1: "Value1"
          - my_map["Key2"]: "Value2"
          - key_str: "Key"
          - my_map[key_str + "3"]: "Value3"
          - my_nested_map: {"NestedMapKey": {"Key1":"Value1"}}
          - my_nested_map.NestedMapKey.Key2: "Value2"
    - step_with_next:
        assign:
          - foo: "bar"
        next: step_with_nested_steps
    - step_with_end:
        assign:
           - foo: "bar"
        next: end
    - step_with_nested_steps:
        steps:
            - nested_step_1:
                assign:
                  - foo: "bar"
            - nested_step_2:
                assign:
                  - foo: "bar"
    - switch_basic:
        switch:
          - condition: ${my_integer < 10}
            next: log
          - condition: ${my_boolean}
            next: return_multiple_values
        next: return_single_value
    - switch_embedded_steps:
        switch:
          - condition: ${my_integer > 10}
            steps:
              - stepA:
                  assign:
                    - foo: "bar"
              - stepB:
                  return: ${foo}
    - log:
        call: sys.log
        args:
          text: ${args}
    - return_multiple_values:
        return:
          my_integer: ${my_integer}
          my_string: ${my_string}
          my_true: ${my_true}
          my_false: ${my_false}
          my_list: ${my_list}
          my_multi_dimen_list: ${my_multi_dimen_list}
          my_map: ${my_map}
          my_nested_map: ${my_nested_map}
    - return_single_value:
        return: ${my_integer}