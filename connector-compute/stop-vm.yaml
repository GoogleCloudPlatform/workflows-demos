# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow sends an HTTP request to Compute Engine API to stop an instance.
#
# HTTP retry:
#     The workflow uses the default retry policy for HTTP calls: retry requests
#     on status codes 429 Too Many Requests, 502 Bad Gateway, and 503 Service
#     Unavailable.
#
# Long running operation:
#     The instances.stop API is a long running operation.
#     This workflow polls the operation status periodically until either the
#     operation is successfully completed
#     or an error occurs.
main:
  params: [args]
  steps:
  - init:
      assign:
        - project: ${sys.get_env("GOOGLE_CLOUD_PROJECT_NUMBER")}
        - zone: "europe-west1-b"
        - instanceName: "${args.instanceName}"
        - i: 0
        - max_polling: 10
        - polling_delay: 1
        - multiplier: 1.25
  - stop_machine:
      try:
          call: http.post
          args:
              url: ${"https://compute.googleapis.com/compute/v1/projects/"+project+"/zones/"+zone+"/instances/"+instanceName+"/stop"}
              auth:
                  type: OAuth2
          result: stop_resp  # The 'instances.stop' API returns a long running operation, which should be polled periodically for status.
      retry: ${http.default_retry}
  - check_status:
      try:
          steps:
              - sleep:
                  call: sys.sleep
                  args:
                      seconds: ${polling_delay}
              - adjust_delay:
                  assign:
                  - polling_delay: ${polling_delay * multiplier}
              - poll_status:
                  call: http.get
                  args:
                      url: ${stop_resp.body.selfLink}
                      auth:
                          type: OAuth2
                  result: status_resp
              - compare:
                  switch:
                  - condition: ${status_resp.body.status == "DONE"}
                    next: successfully_stopped
                  - condition: ${status_resp.body.status == "RUNNING" or status_resp.body.status == "PENDING"}
                    next: poll_status
                  - condition: ${"error" in status_resp.body}
                    next: failed
      retry: ${http.default_retry}
  - successfully_stopped:
      return: "VM instance successfully stopped!"
  - failed:
      return: ${status_resp.body.error}